タスク: 動的コンテンツを持つWebサイトの構築

以下の手順を順番通りに実行してください。各手順は前の結果を使用し、複雑な依存関係を処理します。

1. 作業用ディレクトリ「dynamic_website」を作成する
2. dynamic_website内に「public」フォルダを作成する
3. dynamic_website内に「assets」フォルダを作成する
4. dynamic_website内に「data」フォルダを作成する
5. dynamic_website内に「scripts」フォルダを作成する
6. assetsフォルダ内に「css」フォルダを作成する
7. assetsフォルダ内に「js」フォルダを作成する
8. assetsフォルダ内に「images」フォルダを作成する
9. assets/cssフォルダ内に「main.css」ファイルを作成し、以下のCSSを保存する：
   ```css
   body {
       font-family: Arial, sans-serif;
       margin: 0;
       padding: 20px;
       background-color: #f5f5f5;
   }
   
   .container {
       max-width: 1200px;
       margin: 0 auto;
       background: white;
       padding: 20px;
       border-radius: 8px;
       box-shadow: 0 2px 4px rgba(0,0,0,0.1);
   }
   
   .product-grid {
       display: grid;
       grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
       gap: 20px;
       margin: 20px 0;
   }
   
   .product-card {
       border: 1px solid #ddd;
       padding: 15px;
       border-radius: 5px;
       transition: transform 0.2s;
   }
   
   .product-card:hover {
       transform: translateY(-2px);
       box-shadow: 0 4px 8px rgba(0,0,0,0.15);
   }
   
   .error-message {
       color: #d32f2f;
       background: #ffebee;
       padding: 10px;
       border-radius: 4px;
       margin: 10px 0;
   }
   
   .loading {
       text-align: center;
       color: #666;
   }
   ```
10. assets/cssフォルダ内に「responsive.css」ファイルを作成し、以下のメディアクエリを保存する：
    ```css
    @media (max-width: 768px) {
        .container {
            padding: 10px;
        }
        
        .product-grid {
            grid-template-columns: 1fr;
        }
        
        .product-card {
            margin-bottom: 15px;
        }
    }
    
    @media (max-width: 480px) {
        body {
            padding: 10px;
        }
        
        .container {
            padding: 15px;
        }
    }
    ```
11. dataフォルダ内に「products.json」ファイルを作成し、以下の商品データを保存する：
    ```json
    {
      "products": [
        {
          "id": "P001",
          "name": "Gaming Laptop",
          "price": 129800,
          "category": "electronics",
          "stock": 5,
          "description": "High-performance gaming laptop with RTX graphics",
          "image": "laptop.jpg"
        },
        {
          "id": "P002", 
          "name": "Wireless Mouse",
          "price": 3980,
          "category": "accessories",
          "stock": 25,
          "description": "Ergonomic wireless mouse with precision tracking",
          "image": "mouse.jpg"
        },
        {
          "id": "P003",
          "name": "4K Monitor",
          "price": 45600,
          "category": "electronics", 
          "stock": 8,
          "description": "27-inch 4K UHD monitor with HDR support",
          "image": "monitor.jpg"
        }
      ],
      "categories": ["electronics", "accessories"],
      "lastUpdated": "2024-01-15T10:30:00Z"
    }
    ```
12. dataフォルダ内に「config.json」ファイルを作成し、以下の設定データを保存する：
    ```json
    {
      "site": {
        "title": "TechShop Online",
        "description": "Your one-stop tech shopping destination",
        "currency": "JPY",
        "taxRate": 0.10
      },
      "api": {
        "endpoint": "/api/products",
        "timeout": 5000,
        "retryAttempts": 3
      },
      "features": {
        "enableSearch": true,
        "enableFiltering": true,
        "enableSorting": true
      }
    }
    ```
13. assets/jsフォルダ内に「data-loader.js」ファイルを作成し、以下のJavaScriptを保存する：
    ```javascript
    class DataLoader {
        constructor(config) {
            this.config = config;
            this.cache = new Map();
        }
        
        async loadProducts() {
            try {
                if (this.cache.has('products')) {
                    return this.cache.get('products');
                }
                
                const response = await fetch('./data/products.json');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                this.cache.set('products', data);
                return data;
            } catch (error) {
                console.error('Failed to load products:', error);
                throw error;
            }
        }
        
        async loadConfig() {
            try {
                const response = await fetch('./data/config.json');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                return await response.json();
            } catch (error) {
                console.error('Failed to load config:', error);
                throw error;
            }
        }
    }
    
    window.DataLoader = DataLoader;
    ```
14. assets/jsフォルダ内に「product-renderer.js」ファイルを作成し、以下のコードを保存する：
    ```javascript
    class ProductRenderer {
        constructor(container, config) {
            this.container = container;
            this.config = config;
        }
        
        renderProducts(products) {
            if (!products || !products.products) {
                this.showError('No products data available');
                return;
            }
            
            const productGrid = document.createElement('div');
            productGrid.className = 'product-grid';
            
            products.products.forEach(product => {
                const card = this.createProductCard(product);
                productGrid.appendChild(card);
            });
            
            this.container.innerHTML = '';
            this.container.appendChild(productGrid);
        }
        
        createProductCard(product) {
            const card = document.createElement('div');
            card.className = 'product-card';
            
            const priceWithTax = Math.round(product.price * (1 + this.config.site.taxRate));
            
            card.innerHTML = `
                <h3>${product.name}</h3>
                <p class="description">${product.description}</p>
                <p class="price">¥${product.price.toLocaleString()} (税込: ¥${priceWithTax.toLocaleString()})</p>
                <p class="stock">在庫: ${product.stock}個</p>
                <p class="category">カテゴリ: ${product.category}</p>
                <button onclick="this.addToCart('${product.id}')">カートに追加</button>
            `;
            
            return card;
        }
        
        showError(message) {
            this.container.innerHTML = `<div class="error-message">${message}</div>`;
        }
        
        showLoading() {
            this.container.innerHTML = '<div class="loading">Loading products...</div>';
        }
    }
    
    window.ProductRenderer = ProductRenderer;
    ```
15. assets/jsフォルダ内に「app-main.js」ファイルを作成し、以下のメインアプリケーションコードを保存する：
    ```javascript
    class TechShopApp {
        constructor() {
            this.dataLoader = null;
            this.renderer = null;
            this.config = null;
            this.products = null;
        }
        
        async init() {
            try {
                // 設定を読み込み
                this.config = await this.loadConfig();
                
                // データローダーを初期化
                this.dataLoader = new DataLoader(this.config);
                
                // レンダラーを初期化
                const container = document.getElementById('product-container');
                this.renderer = new ProductRenderer(container, this.config);
                
                // サイト情報を更新
                this.updateSiteInfo();
                
                // 商品データを読み込みと表示
                await this.loadAndRenderProducts();
                
            } catch (error) {
                console.error('App initialization failed:', error);
                this.showInitError(error);
            }
        }
        
        async loadConfig() {
            const loader = new DataLoader();
            return await loader.loadConfig();
        }
        
        async loadAndRenderProducts() {
            this.renderer.showLoading();
            
            try {
                this.products = await this.dataLoader.loadProducts();
                this.renderer.renderProducts(this.products);
            } catch (error) {
                this.renderer.showError('商品データの読み込みに失敗しました');
                throw error;
            }
        }
        
        updateSiteInfo() {
            document.title = this.config.site.title;
            const titleElement = document.getElementById('site-title');
            if (titleElement) {
                titleElement.textContent = this.config.site.title;
            }
            
            const descElement = document.getElementById('site-description');
            if (descElement) {
                descElement.textContent = this.config.site.description;
            }
        }
        
        showInitError(error) {
            const container = document.getElementById('product-container');
            container.innerHTML = `<div class="error-message">アプリケーションの初期化に失敗しました: ${error.message}</div>`;
        }
    }
    
    // アプリケーション開始
    document.addEventListener('DOMContentLoaded', async () => {
        const app = new TechShopApp();
        await app.init();
    });
    
    window.TechShopApp = TechShopApp;
    ```
16. publicフォルダ内に「index.html」ファイルを作成し、以下のHTMLを保存する：
    ```html
    <!DOCTYPE html>
    <html lang="ja">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>TechShop Online</title>
        <link rel="stylesheet" href="../assets/css/main.css">
        <link rel="stylesheet" href="../assets/css/responsive.css">
    </head>
    <body>
        <div class="container">
            <header>
                <h1 id="site-title">Loading...</h1>
                <p id="site-description">Loading...</p>
            </header>
            
            <main>
                <div id="product-container">
                    <div class="loading">Initializing application...</div>
                </div>
            </main>
            
            <footer>
                <p>&copy; 2024 TechShop Online. All rights reserved.</p>
            </footer>
        </div>
        
        <script src="../assets/js/data-loader.js"></script>
        <script src="../assets/js/product-renderer.js"></script>
        <script src="../assets/js/app-main.js"></script>
    </body>
    </html>
    ```
17. scriptsフォルダ内に「site-generator.py」ファイルを作成し、以下のPythonコードを保存する：
    ```python
    import json
    import os
    from datetime import datetime
    
    def generate_sitemap():
        sitemap_data = {
            'pages': [
                {'url': '/index.html', 'priority': 1.0, 'lastmod': datetime.now().isoformat()},
                {'url': '/products.html', 'priority': 0.8, 'lastmod': datetime.now().isoformat()}
            ],
            'generated': datetime.now().isoformat()
        }
        
        with open('../public/sitemap.json', 'w', encoding='utf-8') as f:
            json.dump(sitemap_data, f, ensure_ascii=False, indent=2)
        
        return 'Sitemap generated successfully'
    
    def validate_json_files():
        json_files = ['../data/products.json', '../data/config.json']
        results = []
        
        for file_path in json_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    json.load(f)
                results.append(f"{file_path}: Valid")
            except json.JSONDecodeError as e:
                results.append(f"{file_path}: Invalid - {str(e)}")
            except FileNotFoundError:
                results.append(f"{file_path}: File not found")
        
        return results
    
    def generate_build_info():
        build_info = {
            'buildDate': datetime.now().isoformat(),
            'version': '1.0.0',
            'files': {
                'html': len([f for f in os.listdir('../public') if f.endswith('.html')]),
                'css': len([f for f in os.listdir('../assets/css') if f.endswith('.css')]),
                'js': len([f for f in os.listdir('../assets/js') if f.endswith('.js')]),
                'json': len([f for f in os.listdir('../data') if f.endswith('.json')])
            }
        }
        
        with open('../public/build-info.json', 'w', encoding='utf-8') as f:
            json.dump(build_info, f, ensure_ascii=False, indent=2)
        
        return build_info
    
    if __name__ == "__main__":
        print("Generating sitemap...")
        print(generate_sitemap())
        
        print("Validating JSON files...")
        validation_results = validate_json_files()
        for result in validation_results:
            print(result)
        
        print("Generating build info...")
        build_info = generate_build_info()
        print(f"Build completed: {build_info['files']}")
    ```
18. scriptsディレクトリに移動し、site-generator.pyを実行する
19. publicフォルダ内にsitemap.jsonとbuild-info.jsonが生成されたことを確認する
20. Webブラウザでpublic/index.htmlを開き、ページが正常に表示されることを確認する
21. ブラウザの開発者ツールでJavaScriptのエラーがないことを確認する
22. レスポンシブデザインが機能することを確認（ブラウザウィンドウのリサイズテスト）
23. assets/imagesフォルダ内に「placeholder.txt」ファイルを作成し、「Image files would be placed here」という内容を保存する
24. scriptsフォルダ内に「test-runner.py」ファイルを作成し、以下のテストコードを保存する：
    ```python
    import json
    import os
    
    def test_file_structure():
        required_files = [
            '../public/index.html',
            '../public/sitemap.json', 
            '../public/build-info.json',
            '../assets/css/main.css',
            '../assets/css/responsive.css',
            '../assets/js/data-loader.js',
            '../assets/js/product-renderer.js',
            '../assets/js/app-main.js',
            '../data/products.json',
            '../data/config.json'
        ]
        
        results = []
        for file_path in required_files:
            if os.path.exists(file_path):
                results.append(f"✓ {file_path}")
            else:
                results.append(f"✗ {file_path} - MISSING")
        
        return results
    
    def test_json_integrity():
        json_files = {
            '../data/products.json': ['products', 'categories'],
            '../data/config.json': ['site', 'api', 'features'],
            '../public/build-info.json': ['buildDate', 'version', 'files']
        }
        
        results = []
        for file_path, required_keys in json_files.items():
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                missing_keys = [key for key in required_keys if key not in data]
                if not missing_keys:
                    results.append(f"✓ {file_path} - All keys present")
                else:
                    results.append(f"✗ {file_path} - Missing keys: {missing_keys}")
            
            except Exception as e:
                results.append(f"✗ {file_path} - Error: {str(e)}")
        
        return results
    
    if __name__ == "__main__":
        print("Testing file structure...")
        structure_results = test_file_structure()
        for result in structure_results:
            print(result)
        
        print("\nTesting JSON integrity...")
        json_results = test_json_integrity()
        for result in json_results:
            print(result)
        
        # 結果をファイルに保存
        all_results = structure_results + json_results
        with open('../public/test-results.txt', 'w', encoding='utf-8') as f:
            f.write('\n'.join(all_results))
        
        print(f"\nTest completed. Results saved to test-results.txt")
    ```
25. test-runner.pyを実行し、全ファイルの存在確認とJSONファイルの整合性をテストする
26. publicフォルダ内にtest-results.txtが生成され、全テストが通過していることを確認する
27. dynamic_websiteのルートディレクトリに「deployment-notes.txt」ファイルを作成し、以下の内容を保存する：
    「Deployment Notes\n\nFiles successfully created:\n- HTML structure with dynamic content loading\n- CSS with responsive design\n- JavaScript modules with error handling\n- JSON data files with structured content\n- Python build and test scripts\n\nDependencies:\n- main.css depends on responsive.css\n- app-main.js depends on data-loader.js and product-renderer.js\n- index.html loads all CSS and JS in correct order\n- All JavaScript modules use proper error handling\n\nTesting completed:\n- File structure validation\n- JSON integrity checks\n- Browser compatibility confirmed\n- Responsive design verified」
28. data/products.jsonから商品カテゴリーごとの平均価格を計算し、「analytics.json」ファイルをdataフォルダに保存する
29. すべてのCSSとJavaScriptファイルの行数をカウントし、「code-metrics.txt」ファイルをpublicフォルダに保存する
30. 全ファイルの作成完了と依存関係の正常動作を最終検証し、Webアプリケーションが完全に機能することを確認する