【作業指示】
1) 10つのフォルダを作成してください。それぞれ、process_1, process_2, process_3, process_4, process_5, process_6, process_7, process_8, process_9, process_10とrename。

2) それぞれのフォルダに5つのファイルを作成してください。
   - config.yaml（処理設定を記載）
   - input_stream.txt（入力データストリーム）
   - transformation.py（データ変換ロジック）
   - output_stream.txt（出力データストリーム）
   - metrics.json（処理メトリクス）

3) 6つの数値 x=289, y=134, z=67, w=42, v=23, u=13 があります。
   process_1には: ((x^2 + y^2) / (z*w)) * sin(v°) の計算（小数点第5位まで）
   process_2には: Π(i=1 to u) [1 + i/(x-y*cos(i))] の計算（小数点第6位まで）
   process_3には: 行列[[x,y],[z,w]]の固有値計算と最大固有値の特定
   process_4には: x,y,z,w,v,uを使った2次多項式回帰と決定係数R²の計算（小数点第7位まで）
   process_5には: フーリエ級数の第u項までの和（周期2π、x=π/4での値、小数点第4位まで）
   process_6には: ニュートン法でx^3 - y*x + z = 0の解を求める（初期値w/v、誤差10^-8以内）
   process_7には: 素数判定アルゴリズムでx,y,z,w,v,uの次の素数を全て見つける
   process_8には: ランダムウォークシミュレーション（v*1000ステップ、最終位置と最大到達距離）
   process_9には: 最適化問題: minimize f(a,b) = (a-x)^2 + (b-y)^2 subject to a*z + b*w <= v*u
   process_10には: 暗号化処理: RSA風の処理でp=素数(x以上の最小), q=素数(y以上の最小), n=p*q, φ(n)=(p-1)(q-1), e=65537での公開鍵生成
   
   各フォルダのファイルに適切な内容を記載してください。

4) 各processフォルダ内に「execution_log.txt」を作成し、以下を記載：
   - 開始時刻（ミリ秒精度）
   - 各ステップの処理時間
   - メモリ使用量の変化
   - エラーハンドリング記録
   - 終了時刻と総処理時間

5) ルートフォルダに「pipeline_orchestration.json」を作成し、以下の構造で記載：
   {
     "pipeline": {
       "stages": [各process間の依存関係を定義],
       "data_flow": [データフローの定義],
       "parallel_execution": [並列実行可能なプロセス]
     },
     "performance": {
       "total_execution_time_ms": 総実行時間,
       "bottleneck_process": ボトルネックプロセス,
       "optimization_recommendations": [最適化提案]
     }
   }

6) 「distributed_validation.py」というPythonスクリプトを作成し、以下を実装：
   - 全プロセスの結果を並列検証（multiprocessing使用）
   - 各プロセス間のデータ整合性チェック
   - 計算精度の統計的検証（標準偏差、信頼区間）
   - 異常値検出アルゴリズムの実装
   - 検証結果をvalidation_dashboard.htmlに出力（グラフ付き）
   - 分散処理のシミュレーション（3ノード想定）

7) 「ml_predictor.py」を作成し、以下を実装：
   - 各プロセスの実行時間を機械学習で予測
   - 過去のデータから学習（仮想データセット生成）
   - 予測精度の評価（MAE、RMSE、R²）
   - 予測結果をprediction_report.jsonに出力

8) 「system_monitor.py」を作成し、以下を実装：
   - リアルタイムシステムモニタリングのシミュレーション
   - CPU、メモリ、ディスクI/Oの仮想メトリクス生成
   - アラート条件の定義と検知
   - モニタリングダッシュボードをmonitor_dashboard.htmlに出力

9) 「work_history.log」に作業の詳細な記録を残してください。
   形式: [作業者名] YYYYMMDD HH:MM:SS 作業内容
   各プロセスの実行開始・終了、エラー発生と対処を必ず記録。

10) 「reflection.txt」に作業の振り返りを記載してください。
   【エラー記録】
   - 発生したエラーと解決方法（詳細なスタックトレース含む）
   【つまずいた箇所】
   - 特に難しかった実装や数学的概念
   【指示の不明確な点】
   - 解釈に迷った指示内容と採用した解釈
   【工夫した点】
   - パフォーマンス最適化の工夫
   - コードの可読性向上の工夫
   【改善案】
   - アーキテクチャレベルの改善提案
   - より効率的なアルゴリズムの提案
